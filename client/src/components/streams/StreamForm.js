import React from 'react';
import { Field, reduxForm } from 'redux-form';

class StreamForm extends React.Component {
    renderError({ error, touched }) {
        if (touched && error) {
            return (
                <div className="ui error message">
                    <div className="header">{error}</div>
                </div>
            );
        }
    }
    
    // input and meta automatically passed by redux-form
    // label manually passed via field prop
    // meta.error generated by validate()
    renderInput = ({ input, label, meta }) => {
        const className = `field ${meta.error && meta.touched ? 'error': ''}`;
        return (
            <div className={className}>
                <label>{label}</label>
                <input {...input} />
                {this.renderError(meta)}
            </div>
        );
    }
    
    // called by redux-form given user inputs
    // only called if validation is successful
    onSubmit = (formValues) => {
        this.props.onSubmit(formValues);
    };
    
    render() {
        return (
            <form 
                onSubmit={this.props.handleSubmit(this.onSubmit)} 
                className="error ui form"
            >
                <Field name="title" component={this.renderInput} label="Enter Title" />
                <Field name="description" component={this.renderInput} label="Enter Description" />
                <button className="button ui primary">Submit</button>
            </form>
        );
    }
}

// called by redux-form on any user interaction. validates input
// and returns errors if necessary
const validate = (formValues) => {
    const errors = {};
    
    // no title entered by user
    if (!formValues.title) {
        errors.title = "Please enter a title";
    }
    
    if (!formValues.description) {
        errors.description = "Please enter a description"
    }
    
    return errors;
};

export default reduxForm({
    form: "streamForm",
    validate
})(StreamForm);